# ============================== Environment Variables
if which nvim &> /dev/null
then
  export EDITOR=nvim
else
  export EDITOR=vim
fi
export LC_ALL=en_US.UTF-8
export LC_MESSAGES=en_US.UTF-8
export LANG=en_US.UTF-8
export PATH=$HOME/.local/bin:$PATH
if [[ "x$IS_SSH_MACHINE" == "x1" ]]
then
  export SSH_AUTH_SOCK=/tmp/$USER.agent.sock
fi

[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"

# ============================== Aliases
alias g='git'
alias k='kubectl'
alias lz='lazygit'

# ============================== Colors
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias ll='ls -alF'
  alias la='ls -A'
  alias l='ls -CF'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

# ============================== tmux
# Make tmux play nicely with SSH Agent forwarding
if [ -z ${TMUX+x} ]; then
  # If this is not a tmux session then symlink $SSH_AUTH_SOCK
  if [ ! -S ~/.ssh/ssh_auth_sock ] && [ -S "$SSH_AUTH_SOCK" ]; then
    ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
  fi
else
  # If this is a tmux session then use the symlinked SSH_AUTH_SOCK
  export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
fi

# ============================== Functions
# Builds a given latex file with latexmk in a docker container
tex() {
  tex_name=$1
  docker run --rm -v "$(pwd):/latex" ghcr.io/mkapra/latex-docker:latest latexmk $tex_name
  docker run --rm -v "$(pwd):/latex" ghcr.io/mkapra/latex-docker:latest latexmk -c $tex_name
}

# Builds a given markdown file with the eisvogel theme in a docker container
eis() {
  md_name=$1
  md_without_ending=$(echo $md_name | cut -d '.' -f 1)
  docker run --rm -v "$(pwd):/latex" \
    ghcr.io/mkapra/latex-docker:latest \
    pandoc \
    $md_name \
    -o /latex/$md_without_ending.pdf \
    --from markdown \
    --template eisvogel \
    --listings
}

# Sync kitty terminfo to ssh servers in ~/.ssh/servers
sync_kitty_info() {
  while read -r host; do
    ssh $host mkdir -p \~/.terminfo/${TERM:0:1} < /dev/null
    scp -q /usr/share/terminfo/${TERM:0:1}/$TERM $host:\~/.terminfo/${TERM:0:1}/
  done < "$HOME/.ssh/servers"
}
