let mapleader = "ä"

" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif


call plug#begin()
if has ('mac')
  Plug 'github/copilot.vim'
endif

if has('vim')
  Plug 'ctrlpvim/ctrlp.vim'               	" file finder
endif

" Appearance
Plug 'edkolev/tmuxline.vim'             	" generate a theme for tmux `:TmuxlineSnapshot ~/.tmux.theme`
Plug 'frazrepo/vim-rainbow'
Plug 'sainnhe/everforest'                       " Everforest colorscheme
"" Airline for normal vim and tmuxline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" General plugins for (n)vim
Plug 'jiangmiao/auto-pairs'                     " automatic brackets
Plug 'tpope/vim-commentary'                     " commenting
Plug 'tpope/vim-fugitive'                       " git wrapper
Plug 'tpope/vim-sleuth'                 	" heuristic file indendation
Plug 'vim-scripts/vim-auto-save'                " Auto save files
Plug 'easymotion/vim-easymotion'                " Vim motion on speed

" Plugins only for nvim
if has('nvim')
  Plug 'folke/which-key.nvim'                   " display possible key bindings
  Plug 'kdheepak/lazygit.nvim'                  " Git

  if v:version > 600
    Plug 'nvim-treesitter/nvim-treesitter'
  else
    Plug 'nvim-treesitter/nvim-treesitter', { 'branch': '0.5-compat' }
  endif

  " Dependencies
  Plug 'nvim-lua/plenary.nvim'                  " some lua functions

  " Appearance
  Plug 'mortepau/codicons.nvim'
  Plug 'kyazdani42/nvim-web-devicons'           " Icons for e.g. statusline
  Plug 'lewis6991/gitsigns.nvim'                " git decorations for buffer
  Plug 'nvim-lualine/lualine.nvim'              " Statusline
  "" noice
  "" requires: nui.nvim, nvim-notify
  if has('nvim-0.8.0')
    Plug 'MunifTanjim/nui.nvim'                 " UI Component Library
    Plug 'folke/noice.nvim'
    Plug 'rcarriga/nvim-notify'                 " fancy notifications
  endif
  "" Highlight todo comments
  "" requires: plenary
  if has('nvim-0.8.0')
    Plug 'folke/todo-comments.nvim'
  endif

  " LSP
  Plug 'neovim/nvim-lspconfig'
  if has('nvim-0.7.0')
    Plug 'williamboman/mason.nvim'
    Plug 'williamboman/mason-lspconfig.nvim'
  else
    Plug 'williamboman/nvim-lsp-installer'
  endif
  Plug 'SmiteshP/nvim-navic'                    " Breadcrumbs

  "" rust-tools
  if has('nvim-0.8.0')
    Plug 'simrat39/rust-tools.nvim'
  else
    Plug 'simrat39/rust-tools.nvim', { 'commit': '00e19d4b18a28ec8460dac373dffa5a49448ff6c' }
  endif

  " DAP Debug Adapter Protocol
  if has('nvim-0.7.2')
    Plug 'mfussenegger/nvim-dap'
    Plug 'rcarriga/nvim-dap-ui'
  endif

  " Sidebar
  if has('nvim-0.6.0')
    Plug 'sidebar-nvim/sidebar.nvim'
  endif

  " Telescope
  " requires: plenary
  Plug 'nvim-telescope/telescope-symbols.nvim'  " insert symbols
  Plug 'nvim-telescope/telescope-dap.nvim'      " dap in telescope
  if has('nvim-0.6.0')
    Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' }
  elseif has('nvim-0.5.0')
    Plug 'nvim-telescope/telescope.nvim', { 'tag': 'nvim-0.5.0' }
  end

  " Dev Container for VS Code
  if has('nvim-0.7.0')
    Plug 'esensar/nvim-dev-container'
  endif

  " Snippets
  if has('nvim-0.7.0')
    " Sources for completion
    Plug 'hrsh7th/cmp-buffer'           " Source: buffer
    Plug 'hrsh7th/cmp-nvim-lsp'         " Source: LSP symbols
    Plug 'hrsh7th/cmp-path'             " Source: path
    Plug 'rafamadriz/friendly-snippets' " Source: JSON style snippets for LuaSnip

    " Snippets for cmp
    Plug 'L3MON4D3/LuaSnip'             " Snippet engine
    Plug 'saadparwaiz1/cmp_luasnip'     " Make LuaSnip work with cmp

    Plug 'hrsh7th/nvim-cmp'             " Completion engine
  endif
endif
call plug#end()

" ============================== Colors
if has('termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Switch to dark or light background dependent on existence of file
" ~/.darkmode
function! CheckDarkMode(timer)
  if filereadable(expand("$HOME") . "/.darkmode")
      set background=dark
  else
      set background=light
  endif
  call timer_start(5000, 'CheckDarkMode')
endfunction
call CheckDarkMode(0)

syntax on
let g:everforest_background = 'medium'
let g:everforest_better_performance = 1
colorscheme everforest
set termguicolors
let g:rainbow_active = 1

" ============================== General
filetype indent plugin on
set number
set relativenumber
set cursorline
set ruler
set colorcolumn=80
set nowrap

set showmatch
set hidden
set noswapfile
set confirm
set noshowmode
set noshowcmd
set encoding=utf-8
set mouse=a			        " a=on, c=off
set undolevels=1337
set backspace=indent,eol,start
set wildmenu
set scrolloff=5

if has('vim')
  let g:ctrlp_show_hidden = 1           " show hidden files in ctrlp menus
endif

set wildignore+=*/target/*,*docx*,*pdf* " Hide some files in e.g. :e
" autocmd BufWritePre * :%s/\s\+$//e      " Remove trailing whitespaces
:highlight ExtraWhitespace ctermbg=red guibg=red
:match ExtraWhitespace /\s\+$/

" ============================== Search
set incsearch
set ignorecase
set smartcase
set hlsearch
set mat=5

" ============================== Cursor Thiccness
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" ============================== Statusline
set laststatus=1                      " 1: only if there are at least two windows
set showtabline=1                     " 1: only if there are at least two tab pages
let g:airline_powerline_fonts = 1

let g:tmuxline_preset = {
      \'a'    : ['#H'],
      \'z'    : ['#S'],
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#[fg=black,bold]#I', '#W'],
      \'options' : {'status-justify' : 'centre'}}

" ============================== Treesitter
if has('nvim')
lua << EOF
  require'nvim-treesitter.configs'.setup {
    -- A list of parser names, or "all"
    ensure_installed = { "vim", "bash", "jsonc", "regex", "rust", "ruby", "python" },
    -- Automatically install missing parsers when entering buffer
    -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
    auto_install = true,
    highlight = {
      enable = true,
      additional_vim_regex_highlighting = false,
    }
  }
EOF
endif

" ============================== DEV Containers
if has('nvim-0.7.0')
lua << EOF
require("devcontainer").setup{}
EOF
endif

" ============================== Autosave
let g:auto_save = 1		    " enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
let g:auto_save_silent = 1	    " do not display the auto-save notification

" ============================== Noice
if has('nvim-0.8.0')
lua << EOF
  require("noice").setup({
    presets = {
      bottom_search = true, -- use a classic bottom cmdline for search
      command_palette = true, -- position the cmdline and popupmenu together
      long_message_to_split = true, -- long messages will be sent to a split
      lsp_doc_border = false, -- add a border to hover docs and signature help
    },
  })
EOF
endif

" ============================== TODO comments
if has('nvim-0.8.0')
lua << EOF
require("todo-comments").setup{}
EOF
endif

" ============================== navic
if has('nvim')
lua << EOF
require("nvim-navic").setup{}
EOF
endif

" ============================== lualine
if has('nvim')
lua << EOF
local mode_map = {
  ['n']    = '',
  ['no']   = 'O-P',
  ['nov']  = 'O-P',
  ['noV']  = 'O-P',
  ['no'] = 'O-P',
  ['niI']  = '',
  ['niR']  = '',
  ['niV']  = '',
  ['nt']   = '',
  ['v']    = '',
  ['vs']   = '',
  ['V']    = ' ',
  ['Vs']   = ' ',
  ['']   = ' ',
  ['s']  = ' ',
  ['s']    = 'S',
  ['S']    = 'SL',
  ['i']    = '',
  ['ic']   = '',
  ['ix']   = '',
  ['R']    = '菱',
  ['Rc']   = '菱',
  ['Rx']   = '菱',
  ['Rv']   = 'VR',
  ['Rvc']  = 'VR',
  ['Rvx']  = 'VR',
  ['c']    = '',
  ['cv']   = 'EX',
  ['ce']   = 'EX',
  ['r']    = 'R',
  ['rm']   = 'MORE',
  ['r?']   = 'CONFIRM',
  ['!']    = 'SH',
  ['t']    = 'T',
}

require('lualine').setup({
  options = {
    -- lualine comes with 'everforest' theme
    theme = 'everforest',
    globalstatus = true,
  },
  tabline = {
    lualine_a = {
      {
        'tabs',
        max_length = vim.o.columns / 3,
        mode = 2,
      }
    },
    lualine_b = {},
    lualine_c = {},
    lualine_x = {
      require('nvim-navic').get_location
    },
    lualine_y = {},
    lualine_z = {}
  },
  -- all sections from left to right
  sections = {
    lualine_a = {
      function()
        return mode_map[vim.api.nvim_get_mode().mode] or "__"
      end
    },
    lualine_b = {
      'branch',
    },
    lualine_c = {
      {
        'filename',
        path = 1,
      },
    },
    lualine_x = {
      {
        'diagnostics',
        diagnostics_color = {
          warn = { fg = "orange" },
          info = { fg = "#479bc7" },
          hint = { fg = "darkcyan" }
        },
      },
    },
    lualine_y = {
      'filetype',
      'encoding',
      'fileformat',
      -- show wordcount in md and tex file
      -- show precise count when selecting
      function()
        if vim.bo.filetype == "md" or vim.bo.filetype == "tex" then
          if vim.fn.wordcount().visual_words == 1 then
            return tostring(vim.fn.wordcount().visual_words) .. " word"
          elseif not (vim.fn.wordcount().visual_words == nil) then
            return tostring(vim.fn.wordcount().visual_words) .. " words"
          else
            return tostring(vim.fn.wordcount().words) .. " words"
          end
        else
          return ""
        end
      end
    },
    lualine_z = {
      'progress',
      'location',
      -- Show trailing whitespace
      function()
        local space = vim.fn.search([[\s\+$]], 'nwc')
        return space ~= 0 and "TW:" .. space or ""
      end
    },
  },
})
EOF
endif

" ============================== LSP
if has('nvim-0.7.0')
lua << EOF
require("mason").setup()
EOF
elseif has('nvim')
lua << EOF
require("nvim-lsp-installer").setup({
  automatic_installation = true,
  ui = {
    icons = {
      server_installed = "✓",
      server_pending = "➜",
      server_uninstalled = "✗",
    },
  },
})
EOF
endif

if has('nvim')
lua << EOF
-- Custom warning symbols
local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end
vim.opt.signcolumn = "yes" -- perma show diagnostics columns

local lsp = require('lspconfig')
local navic = require('nvim-navic') -- breadcrumbs

-- Normal LSPs
-- Install with `:LSPInstall`
local servers = { "pylsp", "sumneko_lua", "solargraph", "texlab" }
for _, i in ipairs(servers) do
  lsp[i].setup({
    on_attach = function(client, bufnr)
      navic.attach(client, bufnr) -- breadcrumbs
    end
  })
end

-- Rust (use rust-tools to setup lsp, because it has more features)
local opts = {
  tools = {
    autoSetHints = true,
    inlay_hints = {
      show_parameter_hints = false,
      parameter_hints_prefix = "",
      other_hints_prefix = "",
    },
  },
  server = { -- these settings go directly to lsp
    on_attach = function(client, bufnr)
      navic.attach(client, bufnr) -- breadcrumbs
    end,
    settings = {
      ["rust-analyzer"] = {
        checkOnSave = {
          command = "clippy"
        },
      }
    }
  },
}

-- actually setup rust-tools with the opts from above
require('rust-tools').setup(opts)
EOF
endif

if has('nvim-0.7.2')
lua << EOF
require("dapui").setup({
  icons = { expanded = "", collapsed = "", current_frame = "" },
  mappings = {
    -- Use a table to apply multiple mappings
    expand = { "<CR>", "<2-LeftMouse>" },
    open = "o",
    remove = "d",
    edit = "e",
    repl = "r",
    toggle = "t",
  },
  -- Expand lines larger than the window
  -- Requires >= 0.7
  expand_lines = vim.fn.has("nvim-0.7") == 1,
  controls = {
    -- Requires Neovim nightly (or 0.8 when released)
    enabled = true,
    -- Display controls in this element
    element = "repl",
    icons = {
      pause = "",
      play = "",
      step_into = "",
      step_over = "",
      step_out = "",
      step_back = "",
      run_last = "",
      terminate = "",
    },
  },
})


local dap = require('dap')
dap.set_log_level('TRACE')
dap.adapters.codelldb = {
  type = 'server',
  port = "${port}",
  executable = {
    command = '/Users/mkapra/.local/share/nvim/mason/packages/codelldb/codelldb',
    args = {"--port", "${port}"},
  }
}
dap.adapters.python = {
  type = 'executable';
  command = '/Users/mkapra/.local/share/nvim/mason/packages/debugpy/venv/bin/python';
  args = { '-m', 'debugpy.adapter' };
}

dap.configurations.rust = {
  {
    name = 'Launch Debug',
    type = 'codelldb',
    request = "launch",
    program = function()
        return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/target/debug/' .. '')
    end,
    cwd = '${workspaceFolder}',
    stopOnEntry = false,
    args = {},
    initCommand = {},
    runInTerminal = false
  }
}

dap.configurations.python = {
  {
    -- The first three options are required by nvim-dap
    type = 'python'; -- the type here established the link to the adapter definition: `dap.adapters.python`
    request = 'launch';
    name = "Launch file";

    -- Options below are for debugpy, see https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings for supported options

    program = "${file}"; -- This configuration will launch the current file if used.
    pythonPath = function()
      -- debugpy supports launching an application with a different interpreter then the one used to launch debugpy itself.
      -- The code below looks for a `venv` or `.venv` folder in the current directly and uses the python within.
      -- You could adapt this - to for example use the `VIRTUAL_ENV` environment variable.
      local cwd = vim.fn.getcwd()
      if vim.fn.executable(cwd .. '/venv/bin/python') == 1 then
        return cwd .. '/venv/bin/python'
      elseif vim.fn.executable(cwd .. '/.venv/bin/python') == 1 then
        return cwd .. '/.venv/bin/python'
      elseif vim.fn.executable('~/.venv/bin/python') == 1 then
        return '~/.venv/bin/python'
      else
        return '/usr/bin/python3'
      end
    end;
  },
}

-- Automatically open dapui if dap is started
local dap, dapui = require("dap"), require("dapui")
dap.listeners.after.event_initialized["dapui_config"] = function()
  dapui.open()
end
dap.listeners.before.event_terminated["dapui_config"] = function()
  dapui.close()
end
dap.listeners.before.event_exited["dapui_config"] = function()
  dapui.close()
end
EOF
endif

" ============================== cmp (Completion)
if has('nvim-0.7.0')
lua  << EOF
local cmp = require 'cmp'
cmp.setup({
  snippet = {
    expand = function(args) -- set a snippet engine
      require("luasnip").lsp_expand(args.body)
    end,
  },
  formatting = {
    fields = {'menu', 'abbr', 'kind'},
    format = function(entry, item)
      local menu_icon = {
        nvim_lsp = 'λ',
        luasnip = '',
        buffer = '﬘',
        path = '',
      }

      item.menu = menu_icon[entry.source.name]
      return item
    end,
  },
  sources = {
    { name = 'luasnip', max_item_count = 5 },
    { name = 'nvim_lsp', max_item_count = 10 },
    { name = 'path' },
    { name = 'buffer', keyword_length = 5, max_item_count = 3 },
  },
})
-- Load friendly-snippets
require('luasnip.loaders.from_vscode').lazy_load()
EOF
endif

" ============================== sidebar
if has('nvim-0.6.0')
lua << EOF
local sidebar = require("sidebar-nvim").setup{
  open=false,
  hide_statusline = true,
  sections = { "files", "todos", "diagnostics", "symbols", "git", "containers" },
  containers = {
    attach_shell = "/bin/sh", show_all = true, interval = 5000,
  },
  todos = {
    icon = "",
    ignored_paths = {'~'}, -- ignore certain paths, this will prevent huge folders like $HOME to hog Neovim with TODO searching
    initially_closed = false, -- whether the groups should be initially closed on start. You can manually open/close groups later.
  }
}
EOF
endif

" ============================== gitsigns
if has('nvim')
lua << EOF
require("gitsigns").setup{}
EOF
endif

" ============================== Telescope
if has('nvim')
lua << EOF
require('telescope').setup({
  defaults = {
    prompt_prefix = "   ",
    selection_caret = "  ",
    entry_prefix = "  ",
    sorting_strategy = "ascending",
    layout_strategy = "vertical",
    layout_config = {
      vertical = {
        width = 120,
        prompt_position = "top",
        mirror = true,
      }
    },
    vimgrep_arguments = {
      'rg',
      '--color=never',
      '--no-heading',
      '--with-filename',
      '--line-number',
      '--column',
      '--smart-case',
      '--ignore-file',
      '.gitignore'
    },
    file_ignore_patterns = { "pdf", "docx", "venv", ".git" }
  },
})
require("telescope").load_extension("noice")

if vim.fn.has('nvim-0.7.2') == 1 then
  require('telescope').load_extension('dap')
end
EOF
endif

" ============================== Shortcuts
nnoremap <leader>n  <cmd>noh<cr>    " Reset highlighting

" <Leader>f{char} to move to {char}
map <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

if has('nvim')
lua << EOF
require('which-key').setup {
  layout = {
    align = "center",
  },
}

local map = vim.api.nvim_set_keymap
local default_opts = { noremap = true, silent = true }

map("n", "<leader>tt", "<cmd> ! pdflatex -shell-escape -synctex=1 %<cr>", default_opts)
map("n", "<leader>ts", "<cmd> w<CR>:silent !/Applications/Skim.app/Contents/SharedSupport/displayline <C-r>=line('.')<CR> %<.pdf<CR><CR>", default_opts)

map("n", "<leader>ie", "<cmd> lua require'telescope.builtin'.symbols{ sources = { 'emoji', 'gitmoji' } }<CR>", default_opts) -- Show emojis
map("n", "<leader>im", "<cmd> lua require'telescope.builtin'.symbols{ sources = { 'julia' } }<CR>", default_opts)            -- Show math symbols
map("n", "<leader>in", "<cmd> lua require'telescope.builtin'.symbols{ sources = { 'nerd' } }<CR>", default_opts)             -- Show nerd icons

map("n", "<leader>gg", "<cmd> LazyGit<CR>", default_opts)

map("n", "<leader>lr", "<cmd> lua vim.lsp.buf.rename()<CR>", default_opts)        -- Rename LSP symbol
map("n", "<leader>la", "<cmd> lua vim.lsp.buf.code_action()<CR>", default_opts)   -- Apply LSP code action
map("n", "<leader>ld", "<cmd> Telescope lsp_definitions<CR>", default_opts)       -- Show all LSP definitions (or jump if only 1)
map("n", "<leader>le", "<cmd> Telescope diagnostics<CR>", default_opts)           -- Show errors and warnings
map("n", "<leader>lf", "<cmd> lua vim.lsp.buf.format {async = true }<CR>", default_opts) -- Format buffer with LSP
map("n", "<leader>lh", "<cmd> lua vim.lsp.buf.hover()<CR>", default_opts)         -- Show info of symbol (double tap to enter)
map("n", "<leader>lb", "<cmd> Telescope lsp_references<CR>", default_opts)        -- Show all LSP references
map("n", "<leader>ls", "<cmd> Telescope lsp_workspace_symbols<CR>", default_opts) -- Search for LSP symbols
map("n", "<leader>lt", "<cmd> TodoTelescope<CR>", default_opts)                   -- Search for LSP symbols^

map("n", "<leader>bb", "<cmd> SidebarNvimToggle<CR>", default_opts)

map("n", "<leader>ff", "<cmd> Telescope find_files hidden=true<CR>", default_opts)
map("n", "<leader>fg", "<cmd> Telescope live_grep<CR>", default_opts)
map("n", "<leader>fb", "<cmd> Telescope buffers<CR>", default_opts)
map("n", "<leader>fh", "<cmd> Telescope help_tags<CR>", default_opts)

if vim.fn.has('nvim-0.7') == 1 then
  map("n", "<leader>db", "<cmd> lua require'dap'.toggle_breakpoint()<CR>", default_opts)
  map("n", "<leader>dc", "<cmd> lua require'dap'.continue()<CR>", default_opts)
  map("n", "<leader>dc", "<cmd> lua require'dap'.continue()<CR>", default_opts)
  map("n", "<leader>dsi", "<cmd> lua require'dap'.step_into()<CR>", default_opts)
  map("n", "<leader>dso", "<cmd> lua require'dap'.step_over()<CR>", default_opts)
  map("n", "<leader>dr", "<cmd> lua require'dap'.repl.open()<CR>", default_opts)
  map("n", "<leader>du", "<cmd> lua require'dapui'.toggle()<CR>", default_opts)
end

if vim.fn.has('nvim-0.7') == 1 then
  local cmp = require 'cmp'
  local luasnip = require 'luasnip'
  local has_words_before = function()
    local line, col = unpack(vim.api.nvim_win_get_cursor(0))
    return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
  end
  cmp.setup({
    mapping = {
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-u>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<A-q>'] = cmp.mapping.close(),
      ['<A-o>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
      ['<A-p>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
      ['<Tab>'] = cmp.mapping.confirm({
        behavior = cmp.ConfirmBehavior.Replace,
        select = true
      }),
    }
  })
end

local wk = require 'which-key'
wk.register({
  ["<leader>"] = {
    b = {
      name = "Sidebar",
      b = { "Toggle sidebar" },
    },
    f = {
      name = "Telescope",
      f = { "Find files" },
      g = { "Grep" },
      b = { "Buffers" },
      h = { "Help Tags" },
    },
    d = {
      name = "Debug",
      b = { "Breakpoint" },
      c = { "Continue" },
      s = {
        name = "Step",
        i = { "Into" },
        o = { "Over" },
      },
      r = { "REPL" },
      u = { "Toggle UI" },
    },
    g = {
      name = "git",
      g = { "LazyGit" },
    },
    i = {
      name = "Symbols",
      e = { "Emoji" },
      m = { "Math symbol" },
      n = { "Nerd Font icon" },
    },
    l = {
      name = "LSP",
      a = { "Actions" },
      d = { "Definitions" },
      e = { "Errors" },
      f = { "Format buffer" },
      h = { "Hover information" },
      r = { "(Re)Name symbol" },
      r = { "References" },
      s = { "Symbols" },
      t = { "TODOs" },
    },
    n = { "Reset highlighting" },
    r = { "Easymotion" },
    t = {
      name = "TeX",
      t = { "pdflatex" },
      s = { "skim-synctex" },
    },
  },
})
EOF
endif
