let mapleader = "ä"

" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif


call plug#begin()
if has ('mac')
  Plug 'github/copilot.vim'
endif

if has('vim')
  Plug 'ctrlpvim/ctrlp.vim'               	" file finder
endif
Plug 'tpope/vim-sleuth'                 	" heuristic file indendation
Plug 'tpope/vim-commentary'
Plug 'jiangmiao/auto-pairs'

Plug 'sainnhe/everforest'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'edkolev/tmuxline.vim'             	" generate a theme for tmux `:TmuxLineSnapshot ~/.tmux.theme`

Plug 'frazrepo/vim-rainbow'

Plug 'vim-scripts/vim-auto-save'

if has('nvim')
  Plug 'SmiteshP/nvim-navic'                    " Breadcrumbs

  Plug 'kyazdani42/nvim-web-devicons'
  Plug 'arkav/lualine-lsp-progress'
  Plug 'nvim-lualine/lualine.nvim'

  if has('nvim-0.7.0')
    Plug 'nvim-treesitter/nvim-treesitter'
  elseif has('nvim')
    Plug 'nvim-treesitter/nvim-treesitter', { 'branch': '0.5-compat' }
  endif
  Plug 'esensar/nvim-dev-container'		" Dev Container of VS Code

  Plug 'MunifTanjim/nui.nvim'
  Plug 'rcarriga/nvim-notify'
  if has('nvim-0.8.0')
    Plug 'folke/noice.nvim'
  endif

  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope-symbols.nvim'
  if has('nvim-0.7.0')
    Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' }
  else
    Plug 'nvim-telescope/telescope.nvim', { 'tag': 'nvim-0.5.0' }
  end

  Plug 'neovim/nvim-lspconfig'
  Plug 'williamboman/nvim-lsp-installer'
  if has('nvim-0.7.0')
    Plug 'simrat39/rust-tools.nvim', { 'commit': '00e19d4b18a28ec8460dac373dffa5a49448ff6c' }
  endif

  if has('nvim-0.7.0')
    Plug 'hrsh7th/nvim-cmp'
    Plug 'L3MON4D3/LuaSnip'             " Snippet engine
    Plug 'hrsh7th/cmp-buffer'           " Source: buffer
    Plug 'hrsh7th/cmp-nvim-lsp'         " Source: LSP symbols
    Plug 'hrsh7th/cmp-path'             " Source: path
    Plug 'rafamadriz/friendly-snippets' " Source: JSON style snippets for LuaSnip
    Plug 'saadparwaiz1/cmp_luasnip'     " Make LuaSnip work with cmp
  endif

  Plug 'folke/todo-comments.nvim'
  Plug 'folke/which-key.nvim'
endif
call plug#end()

" ============================== Colors
if has('termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

syntax on
set background=light
let g:everforest_background = 'hard'
let g:everforest_better_performance = 1
colorscheme everforest
set termguicolors
let g:rainbow_active = 1

" ============================== General
filetype indent plugin on
set number
set relativenumber
set cursorline
set ruler
set colorcolumn=80
set nowrap

set showmatch
set hidden
set noswapfile
set confirm
set noshowmode
set noshowcmd
set encoding=utf-8
set mouse=a			" a=on, c=off
set undolevels=1337
set backspace=indent,eol,start
set wildmenu
set scrolloff=5

let g:ctrlp_show_hidden = 1    " show hidden files in ctrlp menus

set wildignore+=*/target/*,*docx*,*pdf
autocmd BufWritePre * :%s/\s\+$//e

" ============================== Search
set incsearch
set ignorecase
set smartcase
set hlsearch
set mat=5

" ============================== Cursor Thiccness
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" ============================== Statusline
set laststatus=1  " 1: only if there are at least two windows
set showtabline=1 " 1: only if there are at least two tab pages
let g:airline_powerline_fonts = 1

let g:tmuxline_preset = {
      \'a'    : ['#H'],
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#[fg=black,bold]#I', '#W'],
      \'y'    : ['%R'],
      \'z'    : ['#S']}
let g:tmuxline_status_justify = 'left'

" ============================== Treesitter
if has('nvim')
lua << EOF
  require'nvim-treesitter.configs'.setup {
    -- A list of parser names, or "all"
    ensure_installed = { "bash", "jsonc", "regex", "rust", "ruby", "python" },
    -- Automatically install missing parsers when entering buffer
    -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
    auto_install = true,
    highlight = {
      enable = true,
      additional_vim_regex_highlighting = false,
    }
  }
EOF
endif

" ============================== DEV Containers
if has('nvim')
lua << EOF
  --require("devcontainer").setup{}
EOF
endif


" ============================== Autosave
let g:auto_save = 1		    " enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
let g:auto_save_silent = 1	    " do not display the auto-save notification

" ============================== Noice
if has('nvim-0.8.0')
lua << EOF
  require("noice").setup{}
EOF
endif

" ============================== Telescope
if has('nvim')
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
lua << EOF
  require('telescope').setup({
    defaults = {
      prompt_prefix = "   ",
      selection_caret = "  ",
      entry_prefix = "  ",
      sorting_strategy = "ascending",
      layout_strategy = "vertical",
      layout_config = {
        vertical = {
          width = 120,
          prompt_position = "top",
          mirror = true,
        }
      }
    },
  })
  --require("telescope").load_extension("noice")
EOF
endif

" ============================== navic
if has('nvim')
lua << EOF
require("nvim-navic").setup{}
EOF
endif

" ============================== lualine
if has('nvim')
lua << EOF
local mode_map = {
  ['n']    = '',
  ['no']   = 'O-P',
  ['nov']  = 'O-P',
  ['noV']  = 'O-P',
  ['no'] = 'O-P',
  ['niI']  = '',
  ['niR']  = '',
  ['niV']  = '',
  ['nt']   = '',
  ['v']    = '',
  ['vs']   = '',
  ['V']    = ' ',
  ['Vs']   = ' ',
  ['']   = ' ',
  ['s']  = ' ',
  ['s']    = 'S',
  ['S']    = 'SL',
  ['i']    = '',
  ['ic']   = '',
  ['ix']   = '',
  ['R']    = '菱',
  ['Rc']   = '菱',
  ['Rx']   = '菱',
  ['Rv']   = 'VR',
  ['Rvc']  = 'VR',
  ['Rvx']  = 'VR',
  ['c']    = '',
  ['cv']   = 'EX',
  ['ce']   = 'EX',
  ['r']    = 'R',
  ['rm']   = 'MORE',
  ['r?']   = 'CONFIRM',
  ['!']    = 'SH',
  ['t']    = 'T',
}

require('lualine').setup({
  options = {
    -- lualine comes with 'everforest' theme
    theme = 'everforest',
  },
  tabline = {
    lualine_a = {
      {
        'tabs',
        max_length = vim.o.columns / 3,
        mode = 2,
      }
    },
    lualine_b = {},
    lualine_c = {},
    lualine_x = {
      require('nvim-navic').get_location
    },
    lualine_y = {},
    lualine_z = {}
  },
  -- all sections from left to right
  sections = {
    lualine_a = {
      function()
        return mode_map[vim.api.nvim_get_mode().mode] or "__"
      end
    },
    lualine_b = {
      'branch',
    },
    lualine_c = {
      {
        'filename',
        path = 1,
      },
    },
    lualine_x = {
      {
        'diagnostics',
        diagnostics_color = {
          warn = { fg = "orange" },
          info = { fg = "#479bc7" },
          hint = { fg = "darkcyan" }
        },
      },
    },
    lualine_y = {
      'filetype',
      'encoding',
      'fileformat',
      -- show wordcount in md and tex file
      -- show precise count when selecting
      function()
        if vim.bo.filetype == "md" or vim.bo.filetype == "tex" then
          if vim.fn.wordcount().visual_words == 1 then
            return tostring(vim.fn.wordcount().visual_words) .. " word"
          elseif not (vim.fn.wordcount().visual_words == nil) then
            return tostring(vim.fn.wordcount().visual_words) .. " words"
          else
            return tostring(vim.fn.wordcount().words) .. " words"
          end
        else
          return ""
        end
      end
    },
    lualine_z = {
      'progress',
      'location',
      -- Show trailing whitespace
      function()
        local space = vim.fn.search([[\s\+$]], 'nwc')
        return space ~= 0 and "TW:" .. space or ""
      end
    },
  },
})
EOF
endif

" ============================== LSP
if has('nvim')
lua << EOF
  -- Custom warning symbols
  local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
  for type, icon in pairs(signs) do
    local hl = "DiagnosticSign" .. type
    vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
  end
  vim.opt.signcolumn = "yes" -- perma show diagnostics columns

  require("nvim-lsp-installer").setup({
    automatic_installation = true,
    ui = {
      icons = {
        server_installed = "✓",
        server_pending = "➜",
        server_uninstalled = "✗",
      },
    },
  })

  local lsp = require('lspconfig')
  local navic = require('nvim-navic') -- breadcrumbs

  -- Normal LSPs
  -- Install with `:LSPInstall`
  local servers = { "pylsp", "sumneko_lua", "solargraph" }
  for _, i in ipairs(servers) do
    lsp[i].setup({
      on_attach = function(client, bufnr)
        navic.attach(client, bufnr) -- breadcrumbs
      end
    })
  end

  -- Rust (use rust-tools to setup lsp, because it has more features)
  local opts = {
    tools = {
      autoSetHints = true,
      inlay_hints = {
        show_parameter_hints = false,
        parameter_hints_prefix = "",
        other_hints_prefix = "",
      },
    },
    server = { -- these settings go directly to lsp
      on_attach = function(client, bufnr)
        navic.attach(client, bufnr) -- breadcrumbs
      end,
      settings = {
        ["rust-analyzer"] = {
          checkOnSave = {
            command = "clippy"
          },
        }
      }
    },
  }

  -- actually setup rust-tools with the opts from above
  require('rust-tools').setup(opts)
EOF
endif

" ============================== cmp (Completion)
if has('nvim-0.7.0')
  lua  << EOF
  local cmp = require 'cmp'
  cmp.setup({
    snippet = {
      expand = function(args) -- set a snippet engine
        require("luasnip").lsp_expand(args.body)
      end,
    },
    sources = {
      { name = 'luasnip', keyword_length = 1, max_item_count = 3 },
      { name = 'nvim_lsp', keyword_length = 1, max_item_count = 10 },
      { name = 'buffer', keyword_length = 5, max_item_count = 3 },
      { name = 'path' },
    },
    -- formatting = {
    --   -- Show icons in cmp box
    --   format = function(_, vim_item)
    --     local icons = require("icons").lspkind
    --     vim_item.kind = string.format("%s %s", icons[vim_item.kind], vim_item.kind)
    --     return vim_item
    --   end,
    -- },
  })
  -- Load friendly-snippets
  require('luasnip.loaders.from_vscode').lazy_load()
EOF
endif

" ============================== Shortcuts
if has('nvim')
  lua << EOF
    require('which-key').setup {
      layout = {
        align = "center",
      },
      show_help = false,
      show_keys = false,
    }
    local map = vim.api.nvim_set_keymap
    local default_opts = { noremap = true, silent = true }
    local wk = require 'which-key'

    map("n", "<leader>h", "<cmd> noh<CR>", default_opts) -- Reset highlighting
    map("n", "<leader>ie", "<cmd> lua require'telescope.builtin'.symbols{ sources = { 'emoji', 'gitmoji' } }<CR>", default_opts) -- Show emojis
    map("n", "<leader>im", "<cmd> lua require'telescope.builtin'.symbols{ sources = { 'julia' } }<CR>", default_opts)            -- Show math symbols
    map("n", "<leader>in", "<cmd> lua require'telescope.builtin'.symbols{ sources = { 'nerd' } }<CR>", default_opts)             -- Show nerd icons
    wk.register({
      ["<leader>"] = {
        i = {
          e = { "Emoji" },
          m = { "Math symbol" },
          n = { "Nerd Font icon" },
        }
      }
    })

    map("n", "<leader>lr", "<cmd> lua vim.lsp.buf.rename()<CR>", default_opts)        -- Rename LSP symbol
    map("n", "<leader>la", "<cmd> lua vim.lsp.buf.code_action()<CR>", default_opts)   -- Apply LSP code action
    map("n", "<leader>ld", "<cmd> Telescope lsp_definitions<CR>", default_opts)       -- Show all LSP definitions (or jump if only 1)
    map("n", "<leader>le", "<cmd> Telescope diagnostics<CR>", default_opts)           -- Show errors and warnings
    map("n", "<leader>lf", "<cmd> lua vim.lsp.buf.formatting()<CR>", default_opts)    -- Format buffer with LSP
    map("n", "<leader>lh", "<cmd> lua vim.lsp.buf.hover()<CR>", default_opts)         -- Show info of symbol (double tap to enter)
    map("n", "<leader>lr", "<cmd> Telescope lsp_references<CR>", default_opts)        -- Show all LSP references
    map("n", "<leader>ls", "<cmd> Telescope lsp_workspace_symbols<CR>", default_opts) -- Search for LSP symbols
    map("n", "<leader>lt", "<cmd> TodoTelescope<CR>", default_opts)                   -- Search for LSP symbols^
    wk.register({
      ["<leader>"] = {
        l = {
          a = { "Actions" },
          d = { "Definitions" },
          e = { "Errors" },
          f = { "Format buffer" },
          h = { "Hover information" },
          r = { "(Re)Name symbol" },
          r = { "References" },
          s = { "Symbols" },
          t = { "TODOs" },
        }
      }
    })

    if vim.fn.has('nvim-0.7') == 1 then
      local cmp = require 'cmp'
      local luasnip = require 'luasnip'
      local has_words_before = function()
        local line, col = unpack(vim.api.nvim_win_get_cursor(0))
        return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
      end
      cmp.setup({
        mapping = {
          ["<Tab>"] = cmp.mapping(function(fallback) -- Advance to next parameter
            if cmp.visible() then
              cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
              luasnip.expand_or_jump()
            elseif has_words_before() then
              cmp.complete()
            else
              fallback()
            end
          end, { "i", "s" }),
          ["<S-Tab>"] = cmp.mapping(function(fallback) -- Got back to last parameter
            if cmp.visible() then
              cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
              luasnip.jump(-1)
            else
              fallback()
            end
          end, { "i", "s" }),
          ["<C-k>"] = cmp.mapping.select_prev_item(),
          ["<C-j>"] = cmp.mapping.select_next_item(),
          ["<Return>"] = cmp.mapping.confirm({
            behavior = cmp.ConfirmBehavior.Insert,
            select = true,
          }),
        },
      })
    end
EOF
endif
